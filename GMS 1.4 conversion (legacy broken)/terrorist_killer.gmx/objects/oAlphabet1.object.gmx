<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sFontCasualEncounter8</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//VARS TO CHANGE
delaySpeedFast = 100; //How long to wait at each letter on fast cycle speed
delaySpeedSlow = 10; //How long to wait at each letter on slow cycle speed
letterSpeed = 5;   //How fast the letters move between grid spaces
goSlowTime = 70;    //How long should the letters move slowly after the user presses space the first time?
verticalSpacing = 8;  //Vertical space between letters
colorNotSelected = make_color_rgb(99,8,8); //Color of letters when not selected
colorSelected = c_black;                        //Color of letters when selected
direction = 90;     //Direction to scroll
pointerMargin = 15;

//VARS NOT TO CHANGE
FONT_HEIGHT = sprite_height;
WRAP_HEIGHT = 25 * (FONT_HEIGHT + verticalSpacing);
alarmGoSlow = goSlowTime;
alarmStopLength = delaySpeedFast;
goSlow = false;
stopped = false;
finished = false;
someLetterSelected = false;

y = -(WRAP_HEIGHT - room_height);

for (i=65; i&lt;=90; i+=1) // asci code for "A" is 65, "Z" is 90
{
  y = y + verticalSpacing + FONT_HEIGHT;
  newLetter = instance_create(x,y,oLetter1);
  newLetter.letter = chr(i);
  newLetter.direction = direction;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (finished)
{
  exit;
}

//Is any letter selected?
someLetterSelected = false;
for (i=0; i&lt;instance_count; i+=1)
{
  iii = instance_id[i];
  if (instance_exists(iii))
  {
    if (iii.object_index == oLetter1)
    {
      if (iii.selected)
        someLetterSelected = true;
    }
  }
}

//Finished
if (goSlow and button.pressed and button.newPress and !finished and someLetterSelected)
{
  for (i=0; i&lt;instance_count; i+=1)
  {
    iii = instance_id[i];
    if (instance_exists(iii))
    {
      if (iii.object_index == oLetter1)
      {
        with(iii)
        {
          if (!selected)
            instance_destroy();
        } 
      }
    }
  }
  finished = true;
  oPointer.visible = false;
  speed = 0;
  y = oPointer.y;  
  exit;
}

//goSlow?
if (button.pressed and button.newPress and !goSlow)
{
  alarmGoSlow = goSlowTime;
  goSlow = true;
}
if (goSlow)
{
  alarmGoSlow -= 1;
}
if (alarmGoSlow &lt;= 0)
{
  goSlow = false;
}
    
if (goSlow)
{
  //Make pointer visible
  oPointer.x = x + pointerMargin;
  oPointer.visible = true;

  //Stop at "grid" points    
  if ((y mod (FONT_HEIGHT + verticalSpacing) == 0) and !stopped)
  {
    if (goSlow)
    {
      alarmStopLength = delaySpeedSlow;
    }
    else
    {
      alarmStopLength = delaySpeedFast;
    }
    stopped = true;  
  }
  if (stopped)
  {
    speed = 0;
    alarmStopLength -= 1;
  }
  if (alarmStopLength &lt;= 0)
  {
    stopped = false;
    speed = letterSpeed;
  }
}
else
{
  speed = letterSpeed;
  oPointer.visible = false;
}

//Wrap the around screen
if (y &lt; 0)
  if ((abs(y) + room_height) == WRAP_HEIGHT)
    y = room_height + FONT_HEIGHT + verticalSpacing;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  draw_set_font(global.font8);
  draw_set_color(c_red);
  draw_text(x,y,"!");
  selected = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
